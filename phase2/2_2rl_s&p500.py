# -*- coding: utf-8 -*-
"""2.2RL-S&P500.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d8G9wfMVwIGF6ypq-LG1baHYHbs2q_Lm
"""

# pip install yfinance

import datetime as dt
import yfinance as yf

import random
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Deque (Doubly Ended Queue)
from collections import deque

import numpy as np
import pandas as pd
import gym
from gym import spaces

class StockTradingEnv(gym.Env):
    """
    A stock trading environment for OpenAI gym
    """
    # - human: render to the current display or terminal and return nothing. 
    # Usually for human consumption.
    metadata = {'render.modes': ['human']}

    def __init__(self, df):
        super(StockTradingEnv, self).__init__()

        self.df = df

        # Actions of the format Buy(0), Sell(1), and Hold(2)
        self.action_space = spaces.Discrete(3)

        # Stock's Price
        self.observation_space = spaces.Box(
            low = df['Open'].min(), high = df['Open'].max(), shape = (1,), dtype = np.float16)

    def _next_observation(self):
        # Get the stock price
        obs = self.df['Open'][self.current_step]

        return obs

    def _take_action(self, action):
        # Set the current price to a random price within the time step
        current_price = np.random.uniform(
            self.df.loc[self.current_step, "Open"], self.df.loc[self.current_step, "Close"])

        action_type = action

        if action_type == 0:
            if self.balance > current_price:
              # Buy 1 share of stock
              shares_bought = 1
              additional_cost = shares_bought * current_price
              self.balance -= additional_cost
              self.shares_held += shares_bought

        elif action_type == 2:
            if self.shares_held > 0:
              # Sell 1 share of stock
              shares_sold = 1
              self.balance += shares_sold * current_price
              self.shares_held -= shares_sold

        self.net_worth = self.balance + self.shares_held * current_price

    def step(self, action):
        # Execute one time step within the environment
        self._take_action(action)

        self.current_step += 1

        if self.current_step >= self.df.shape[0]:
            done = True
            return 0, 0, done, {}

        delay_modifier = (self.current_step - self.start) / MAX_STEPS

        reward = self.net_worth * delay_modifier
        done = self.net_worth <= 0

        obs = self._next_observation()

        return obs, reward, done, {}

    def reset(self):
        # Reset the state of the environment to an initial state
        self.balance = INITIAL_ACCOUNT_BALANCE
        self.net_worth = INITIAL_ACCOUNT_BALANCE
        self.shares_held = 0

        # Set the current step to a random point within the data frame (0-100)
        self.current_step = np.random.randint(0, 100)
        self.start = self.current_step

        return self._next_observation()

    def render(self, mode = 'human', show = False):
        # Render the environment to the screen
        profit = self.net_worth - INITIAL_ACCOUNT_BALANCE
        if show:
          print(f'Step: {self.current_step - self.start}')
          print(f'Balance: {self.balance}')
          print(
              f'Shares held: {self.shares_held}')
          print(
              f'Net worth: {self.net_worth}')
          print(f'Profit: {profit}')
          print('-----------------------------------------------------------------')

MAX_STEPS = 20000
INITIAL_ACCOUNT_BALANCE = 10000

aapl_df = yf.download('^GSPC', 
                      start='2016-01-02', 
                      end='2018-11-16', 
                      progress=False,
)
aapl_df = pd.DataFrame(aapl_df.values, columns = aapl_df.columns.values)

df = aapl_df.copy()
env = StockTradingEnv(df)
env.df.shape

env.observation_space.shape[0], env.action_space.n

class DQN:
    def __init__(self, env):
        self.env     = env
        self.memory  = deque(maxlen = 2000)
        
        self.gamma = 0.85
        self.epsilon = 1.0
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.995
        self.learning_rate = 0.005
        self.tau = .125
        
        # to get convergence in the DQN algorithm
        self.model        = self.create_model()
        self.target_model = self.create_model()
        self.target_model.set_weights(self.model.get_weights())

    def create_model(self):
        model        = Sequential()
        model.add(keras.Input(shape = (1,)))
        model.add(Dense(24, activation = "relu"))
        model.add(Dense(48, activation = "relu"))
        model.add(Dense(24, activation = "relu"))
        model.add(Dense(self.env.action_space.n))
        model.compile(loss = "mean_squared_error",
                      optimizer = Adam(learning_rate = self.learning_rate))
        return model

    def act(self, state):
        self.epsilon *= self.epsilon_decay
        self.epsilon = max(self.epsilon_min, self.epsilon)
        if np.random.random() < self.epsilon:
            return self.env.action_space.sample()
        else:
            return np.argmax(self.model.predict(state))

    def remember(self, state, action, reward, new_state, done):
        self.memory.append([state, action, reward, new_state, done])

    def replay(self):
        batch_size = 32
        if len(self.memory) < batch_size: 
            return
        
        # Sample a batch sized data from memory
        samples = random.sample(self.memory, batch_size)
        for sample in samples:
            state, action, reward, new_state, done = sample
            state = np.array(state).reshape(1, -1)
            new_state = np.array(new_state).reshape(1, -1)
            target = self.target_model.predict(state)
            if done:
                target[0][action] = reward
            else:
                Q_future = max(self.target_model.predict(new_state)[0])
                target[0][action] = reward + Q_future * self.gamma
            self.model.fit(state, target, epochs = 1, verbose = 0)

    def target_train(self):
        weights = self.model.get_weights()
        target_weights = self.target_model.get_weights()
        for i in range(len(target_weights)):
            target_weights[i] = weights[i] * self.tau + target_weights[i] * (1 - self.tau)
        self.target_model.set_weights(target_weights)

    def save_model(self, fn):
        self.model.save(fn)

env     = StockTradingEnv(df)
gamma   = 0.9
epsilon = .95

trials  = 1000
trial_len = 500

dqn_agent = DQN(env = env)
steps = []
for trial in range(trials):
    cur_state = env.reset().reshape(1, -1)
    for step in range(trial_len):
        action = dqn_agent.act(cur_state)
        new_state, reward, done, _ = env.step(action)

        # reward = reward if not done
        dqn_agent.remember(cur_state, action, reward, new_state, done)
        new_state = np.array(new_state).reshape(1, -1)
        
        dqn_agent.replay()       
        dqn_agent.target_train() 

        cur_state = new_state.reshape(1, -1)
        if done:
            break
    if step >= 199:
        print("Failed to complete in trial {}".format(trial))
        if step % 10 == 0:
            dqn_agent.save_model("trial-{}.model".format(trial))
    else:
        print("Completed in {} trials".format(trial))
        dqn_agent.save_model("success.model")
        break